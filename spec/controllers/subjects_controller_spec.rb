# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SubjectsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Subject. As you add validations to Subject, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'Name',
      key_term_id: 2 }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubjectsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:user) { FactoryBot.create(:user) }
  let(:admin) { FactoryBot.create(:user, role: 'admin') }

  describe 'GET #index' do
    it 'assigns all subjects as @subjects' do
      subject = Subject.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:subjects)).to eq([subject])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested subject as @subject' do
      subject = Subject.create! valid_attributes
      get :show, params: { id: subject.to_param }, session: valid_session
      expect(assigns(:subject)).to eq(subject)
    end
  end

  describe 'GET #new' do
    it 'assigns a new subject as @subject' do
      sign_in admin
      get :new, params: {}, session: valid_session
      expect(assigns(:subject)).to be_a_new(Subject)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested subject as @subject' do
      sign_in admin
      subject = Subject.create! valid_attributes
      get :edit, params: { id: subject.to_param }, session: valid_session
      expect(assigns(:subject)).to eq(subject)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      context 'when not logged in' do
        it 'does not create a new Subject' do
          expect do
            post :create, params: { subject: valid_attributes }, session: valid_session
          end.not_to change(Subject, :count)
        end
      end

      context 'when logged in as non-admin user' do
        before do
          sign_in user
        end

        it 'does not create a new Subject' do
          expect do
            post :create, params: { subject: valid_attributes }, session: valid_session
          end.not_to change(Subject, :count)
        end
      end

      context 'when logged in as admin user' do
        before do
          sign_in admin
        end

        it 'creates a new Subject' do
          expect do
            post :create, params: { subject: valid_attributes }, session: valid_session
          end.to change(Subject, :count).by(1)
        end

        it 'assigns a newly created subject as @subject' do
          post :create, params: { subject: valid_attributes }, session: valid_session
          expect(assigns(:subject)).to be_a(Subject)
          expect(assigns(:subject)).to be_persisted
        end

        it 'redirects to the created subject' do
          post :create, params: { subject: valid_attributes }, session: valid_session
          expect(response).to redirect_to(Subject.last)
        end
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved subject as @subject' do
        post :create, params: { subject: invalid_attributes }, session: valid_session
        expect(assigns(:subject)).to be_a_new(Subject)
      end

      it "re-renders the 'new' template" do
        post :create, params: { subject: invalid_attributes }, session: valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { name: 'New subject name' }
      end

      context 'when not logged in' do
        it 'does not modify the requested Subject' do
          subject = Subject.create! valid_attributes
          expect do
            put :update, params: { id: subject.id, subject: new_attributes }, session: valid_session
            subject.reload
          end.not_to(change { Subject.find(subject.id) })
          expect(subject.name).to eq('Name')
        end
      end

      context 'when logged in as a non-admin user' do
        before do
          sign_in user
        end

        it 'does not modify the requested Subject' do
          subject = Subject.create! valid_attributes
          expect do
            put :update, params: { id: subject.id, subject: new_attributes }, session: valid_session
            subject.reload
          end.not_to(change { Subject.find(subject.id) })
          expect(subject.name).to eq('Name')
        end
      end

      context 'when logged in as admin user' do
        before do
          sign_in admin
        end

        it 'updates the requested subject' do
          subject = Subject.create! valid_attributes
          put :update, params: { id: subject.to_param, subject: new_attributes }, session: valid_session
          subject.reload
          expect(subject.name).to eq('New subject name')
        end

        it 'assigns the requested subject as @subject' do
          subject = Subject.create! valid_attributes
          put :update, params: { id: subject.to_param, subject: valid_attributes }, session: valid_session
          expect(assigns(:subject)).to eq(subject)
        end

        it 'redirects to the subject' do
          subject = Subject.create! valid_attributes
          put :update, params: { id: subject.to_param, subject: valid_attributes }, session: valid_session
          expect(response).to redirect_to(subject)
        end
      end
    end

    context 'with invalid params' do
      it 'assigns the subject as @subject' do
        subject = Subject.create! valid_attributes
        put :update, params: { id: subject.to_param, subject: invalid_attributes }, session: valid_session
        expect(assigns(:subject)).to eq(subject)
      end

      it "re-renders the 'edit' template" do
        subject = Subject.create! valid_attributes
        put :update, params: { id: subject.to_param, subject: invalid_attributes }, session: valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    context 'when not logged in' do
      it 'does not delete anything' do
        subject = Subject.create! valid_attributes
        expect do
          delete :destroy, params: { id: subject.to_param }, session: valid_session
        end.not_to change(Subject, :count)
      end
    end

    context 'when logged in as non-admin user' do
      before do
        sign_in user
      end

      it 'does not delete anything' do
        subject = Subject.create! valid_attributes
        expect do
          delete :destroy, params: { id: subject.to_param }, session: valid_session
        end.not_to change(Subject, :count)
      end
    end

    context 'when logged in as admin user' do
      before do
        sign_in admin
      end

      it 'destroys the requested subject' do
        subject = Subject.create! valid_attributes
        expect do
          delete :destroy, params: { id: subject.to_param }, session: valid_session
        end.to change(Subject, :count).by(-1)
      end

      it 'redirects to the subjects list' do
        subject = Subject.create! valid_attributes
        delete :destroy, params: { id: subject.to_param }, session: valid_session
        expect(response).to redirect_to(subjects_url)
      end
    end
  end
end
